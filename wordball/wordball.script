local words = require "wordball.words"
local camera = require "orthographic.camera"

local HIGHLIGHT = vmath.vector4(1.1, 1.1, 1.1, 0)
local SELECTED = vmath.vector4(1.6, 1.6, 1.6, 0)
local BONUS = vmath.vector4(0, 2, 0, 0.5)
local NORMAL = vmath.vector4(1)
local LOCKED = vmath.vector4(0.4, 0.4, 0.4, 1)

-- send a message to the gui
local function post_to_ui(message_id, message)
	msg.post("ui#wordball", message_id, message)
end

-- tint a letter
-- the letter can have a base tint and then an additional tint (for highlight)
local function tint_letter(letter, tint)
	tint = tint or vmath.vector4(0)
	local tint_mul = vmath.vector4(letter.tint.x + tint.x, letter.tint.y + tint.y, letter.tint.z + tint.z, letter.tint.w + tint.w)
	go.set(msg.url(nil, letter.id, "bg"), "tint", tint_mul)
end

local function one_in_x(chance)
	return math.random(1, chance) == chance
end

-- create a floating feedback text
local function feedback(text)
	print("feedback", text)
	label.set_text("feedback#label", text)
	go.set_position(vmath.vector3(320, -200, 0), "feedback")
	go.animate("feedback", "position.y", go.PLAYBACK_ONCE_FORWARD, 568, go.EASING_OUTQUAD, 1, 0, function()
		go.set_position(vmath.vector3(320, -200, 0), "feedback")
	end)
end

-- spawn a new ball
local function spawn_ball(self, letter)
	local bonus = one_in_x(10)
	local tint = bonus and BONUS or NORMAL
	local id = factory.create("factories#ball", vmath.vector3(math.random(40,600), 1300, 0), nil, {}, 0.75)
	letter = letter or words.random_letter()
	value = words.value(letter)
	if bonus then
		value = value + 25
	end
	label.set_text(msg.url(nil, id, "letter"), letter)
	label.set_text(msg.url(nil, id, "value"), value)
	self.letters[id] = { letter = letter, selected = false, id = id, tint = tint, bonus = bonus, value = value }
	tint_letter(self.letters[id])
end

-- get the word and score for a list of letters
-- iterate the letters to concatenate the characters
-- and calculate the score
-- note: this does not check if the word is valid or not
local function word_and_score_from_letters(letters)
	local word = ""
	local value = 0
	for _,letter in pairs(letters) do
		word = word .. letter.letter
		value = value + letter.value
	end
	return word, value
end

-- add a letter to the word that is currently being created
-- returns the current word and score
local function add_letter_to_word(self, letter_to_add)
	letter_to_add.selected = true
	tint_letter(letter_to_add, SELECTED)
	table.insert(self.word, letter_to_add)
	return word_and_score_from_letters(self.word)
end

-- remove a letter from the word that is currently being created
-- returns the current word and score
local function remove_letter_from_word(self, letter_to_remove)
	for i,letter in ipairs(self.word) do
		if letter.id == letter_to_remove.id then
			tint_letter(letter_to_remove)
			letter_to_remove.selected = false
			table.remove(self.word, i)
			break
		end
	end
	return word_and_score_from_letters(self.word)
end

-- delete all letters in the current word
-- this will delete the associated game objects
local function delete_word(self)
	for k,letter in pairs(self.word) do
		self.word[k] = nil
		go.delete(letter.id)
	end
end

-- cancel creation of the current word
-- this will remove the individual letters from the word
local function cancel_word(self)
	while #self.word > 0 do
		remove_letter_from_word(self, self.word[1])
	end
end

--- reset the letters of the current word and lock them
-- so that they can't be interacted with
local function reset_and_lock_word(self)
	while #self.word > 0 do
		local letter = self.word[1]
		remove_letter_from_word(self, letter)
		letter.tint = LOCKED
		tint_letter(letter)
		msg.post(msg.url(nil, letter.id, "cursor"), "disable")
		msg.post(msg.url(nil, letter.id, "letter"), "disable")
		msg.post(msg.url(nil, letter.id, "value"), "disable")
	end
end

local function update_score(self)
	post_to_ui("update_score", { score = self.score, max = 100 })
end

local function delay(duration)
	local co = coroutine.running()
	assert(co, "You must run this from a coroutine")
	timer.delay(duration, false, function()
		local ok, err = coroutine.resume(co)
		if not ok then print(err) end
	end)
	coroutine.yield()
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.125, 0.1, 0.1, 1.0) })
	words.load("en")
	math.randomseed(os.time())
	self.letters = {}
	self.word = {}
	self.score = 0
	update_score(self)

	-- game loop
	coroutine.wrap(function()
		for i=1,10 do
			spawn_ball(self)
			delay(0.1)
		end
		while true do
			spawn_ball(self)
			delay(2)
		end
	end)()
end

function on_message(self, message_id, message, sender)
	-- cursor is over a letter, highlight it
	if message_id == hash("cursor_over") then
		local letter = self.letters[message.id]
		tint_letter(letter, HIGHLIGHT)
	-- cursor moved out from letter, remove highlight
	elseif message_id == hash("cursor_out") then
		local letter = self.letters[message.id]
		if letter.selected then
			tint_letter(letter, SELECTED)
		else
			tint_letter(letter, vmath.vector4(0))
		end
	-- letter has been clicked (pressed+released cycle)
	elseif message_id == hash("released") then
		local letter = self.letters[message.id]
		if not letter.selected then
			local word, score = add_letter_to_word(self, letter)
			post_to_ui("word", { word = word, score = score } )
		else
			local word, score = remove_letter_from_word(self, letter)
			post_to_ui("word", { word = word, score = score } )
		end
	elseif message_id == hash("cancel_word") then
		cancel_word(self)
	elseif message_id == hash("confirm_word") then
		local word, score = word_and_score_from_letters(self.word)
		if words.is_word(word) then
			feedback("CORRECT!\n+" .. tostring(value) .. " pts")
			self.score = self.score + score
			update_score(self)
			delete_word(self)
		else
			feedback("WRONG!")
			reset_and_lock_word(self)
		end
	end
end

function on_input(self, action_id, action)
	local screen = vmath.vector3(action.x, action.y, 0)
	local world = camera.screen_to_world(hash("/camera"), screen)
	action.x = world.x
	action.y = world.y
	msg.post("#cursor", "input", { action_id = action_id, action = action })
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
